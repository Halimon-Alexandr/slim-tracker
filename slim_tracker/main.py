from pydub import AudioSegment
import speech_recognition as sr
import pytz
import os
import pickle
import telebot
from telebot import types
from decouple import config
from datetime import datetime, timedelta
from statistics import mean
from decimal import Decimal
kiev_timezone = pytz.timezone("Europe/Kiev")


ADMIN_IDS = config('TG_CHAT_ADMIN').split(',')
API_TOKEN = config('TG_BOT_TOKEN')

bot = telebot.TeleBot(API_TOKEN)

user_data = {}

class UserInfo:
    def __init__(self, gender=None, first_name=None, age=None, height=None, weight=None):
        self.gender = gender
        self.first_name = first_name
        self.age = age
        self.height = height
        self.weight = weight
        self.measurements = []

    def add_measurement(self, age, height, weight):
        today = datetime.now(kiev_timezone).date()
        for measurement in self.measurements:
            if measurement['date'] == today:
                measurement['age'] = age
                measurement['height'] = height
                measurement['weight'] = weight
                break
        else:
            self.measurements.append({
                'date': today,
                'age': age,
                'height': height,
                'weight': weight,
            })

    def calculate_bmi(self):
        return self.weight / ((self.height / 100) ** 2)

    def get_optimal_weight(self):
        min_bmi, max_bmi = 18.5, 24.9
        if self.age < 18:
            if self.gender == 'üë®':
                if self.age < 6:
                    min_bmi, max_bmi = 14.0, 19.0
                elif self.age < 12:
                    min_bmi, max_bmi = 16.0, 22.0
                else:
                    min_bmi, max_bmi = 17.0, 23.0
            else:
                if self.age < 6:
                    min_bmi, max_bmi = 13.5, 18.5
                elif self.age < 12:
                    min_bmi, max_bmi = 15.5, 21.5
                else:
                    min_bmi, max_bmi = 16.5, 22.5
        else:
            min_weight = min_bmi * (self.height / 100) ** 2
            max_weight = max_bmi * (self.height / 100) ** 2
            return round(min_weight, 1), round(max_weight, 1)

    def get_health_status(self):
        bmi = self.calculate_bmi()
        optimal_weight_range = self.get_optimal_weight()
        status = []
        
        if self.age < 18:
            status.append("–û—Ü—ñ–Ω–∫–∞ BMI –¥–ª—è –¥—ñ—Ç–µ–π —Ç–∞ –ø—ñ–¥–ª—ñ—Ç–∫—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—é.")
        else:
            if bmi < 18.5:
                status.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞")
            elif 18.5 <= bmi < 24.9:
                status.append("–ù–æ—Ä–º–∞–ª—å–Ω–∞ –≤–∞–≥–∞")
            elif 25.0 <= bmi < 29.9:
                status.append("–ù–∞–¥–º—ñ—Ä–Ω–∞ –≤–∞–≥–∞")
            elif 30.0 <= bmi < 34.9:
                status.append("–û–∂–∏—Ä—ñ–Ω–Ω—è 1 —Å—Ç—É–ø–µ–Ω—è (–ª–µ–≥–∫–µ)")
            elif 35.0 <= bmi < 39.9:
                status.append("–û–∂–∏—Ä—ñ–Ω–Ω—è 2 —Å—Ç—É–ø–µ–Ω—è (–ø–æ–º—ñ—Ä–Ω–µ)")
            else:  # bmi >= 40.0
                status.append("–û–∂–∏—Ä—ñ–Ω–Ω—è 3 —Å—Ç—É–ø–µ–Ω—è (–≤–∞–∂–∫–µ)")
        
        status.append(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å: {optimal_weight_range[0]} - {optimal_weight_range[1]} –∫–≥")
        return ", ".join(status)

    def get_last_measurements(self):
        today = datetime.now(kiev_timezone).date()
        yesterday = today - timedelta(days=1)
        measurements_today = [m for m in self.measurements if m['date'] == today]
        measurements_yesterday = [m for m in self.measurements if m['date'] == yesterday]
        result = ""
        if measurements_today:
            result += f"–°—å–æ–≥–æ–¥–Ω—ñ: –í–∞–≥–∞ {measurements_today[-1]['weight']} –∫–≥\n"
        else:
            result += "–°—å–æ–≥–æ–¥–Ω—ñ: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö\n"
        if measurements_yesterday:
            result += f"–í—á–æ—Ä–∞: –í–∞–≥–∞ {measurements_yesterday[-1]['weight']} –∫–≥\n"
        else:
            result += "–í—á–æ—Ä–∞: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö\n"
        if not measurements_today and not measurements_yesterday:
            last_measurement = sorted(self.measurements, key=lambda m: m['date'], reverse=True)
            if last_measurement:
                last_measurement_date = last_measurement[0]['date']
                result += f"–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–º—ñ—Ä: {last_measurement_date.day}.{last_measurement_date.month}\n"
        return result

    def get_weight_difference(self):
        if len(self.measurements) < 2:
            return "–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ü—ñ."
        
        # –°–æ—Ä—Ç—É—î–º–æ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        sorted_measurements = sorted(self.measurements, key=lambda m: m['date'], reverse=True)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        last_measurement = sorted_measurements[0]
        previous_measurement = sorted_measurements[1]
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Decimal –¥–ª—è —Ç–æ—á–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å
        last_weight = Decimal(str(last_measurement['weight']))
        previous_weight = Decimal(str(previous_measurement['weight']))
        
        # –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é
        difference = last_weight - previous_weight
        
        return f"{difference:.2f} –∫–≥"

    def get_average_weight_change(self, days):
        today = datetime.now(kiev_timezone).date()
        past_date = today - timedelta(days=days)
        relevant_measurements = [m for m in self.measurements if m['date'] >= past_date]
        if len(relevant_measurements) < 2:
            return f"–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤."
        weights = [m['weight'] for m in relevant_measurements]
        total_change = sum(weights[i] - weights[i + 1] for i in range(len(weights) - 1))
        average_change = total_change / (len(weights) - 1)
        if average_change > 0:
            return f"–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–∏—Ä—ñ—Å—Ç –≤–∞–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤: {average_change:.2f} –∫–≥"
        elif average_change < 0:
            return f"–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∏–∂–µ–Ω–Ω—è –≤–∞–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤: {abs(average_change):.2f} –∫–≥"
        else:
            return f"–í–∞–≥–∞ –∑–∞–ª–∏—à–∏–ª–∞—Å—å –Ω–µ–∑–º—ñ–Ω–Ω–æ—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {days} –¥–Ω—ñ–≤."

    def get_weekly_weight_difference(self):
        today = datetime.now(kiev_timezone).date()
        week_ago = today - timedelta(days=7)
        weights = [Decimal(str(m['weight'])) for m in self.measurements if m['date'] >= week_ago]
        
        if len(weights) < 2:
            return "–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤."
        
        initial_weight = weights[0]
        final_weight = weights[-1]
        difference = final_weight - initial_weight
        
        return f"{difference:.2f} –∫–≥"

    def get_monthly_weight_difference(self):
        today = datetime.now(kiev_timezone).date()
        month_ago = today - timedelta(days=30)
        weights = [Decimal(str(m['weight'])) for m in self.measurements if m['date'] >= month_ago]
        
        if len(weights) < 2:
            return "–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤."
        
        initial_weight = weights[0]
        final_weight = weights[-1]
        difference = final_weight - initial_weight
        
        return f"{difference:.2f} –∫–≥"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç
def recognize_speech(file_path):
    # –®–ª—è—Ö–∏ –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    ogg_path = file_path
    wav_path = "temp.wav"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OGG –≤ WAV
    audio = AudioSegment.from_ogg(ogg_path)
    audio.export(wav_path, format="wav")
    
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language="uk-UA")  # –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
        return text
    except (sr.UnknownValueError, sr.RequestError):
        return False
    finally:
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if os.path.exists(wav_path):
            os.remove(wav_path)


# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, 'wb') as file:
        pickle.dump(user_data, file)

# –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
def load_data():
    global user_data
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'rb') as file:
            user_data = pickle.load(file)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return str(user_id) in ADMIN_IDS


def calculate_top_users():
    week_ago = datetime.now(kiev_timezone).date() - timedelta(days=7)
    top_users = []

    for user_id, user_info in user_data.items():
        recent_measurements = [m for m in user_info.measurements if m['date'] >= week_ago]
        if len(recent_measurements) < 2:
            continue

        weights = [Decimal(str(m['weight'])) for m in recent_measurements]
        initial_weight = weights[0]
        final_weight = weights[-1]

        try:
            if initial_weight == Decimal('0'):
                percentage_change = Decimal('inf')  # Avoid division by zero
            else:
                percentage_change = ((final_weight - initial_weight) / initial_weight) * Decimal('100')
        except InvalidOperation:
            percentage_change = Decimal('inf')

        if percentage_change < 0:
            status = "–∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞–≥–∏ –Ω–∞"
        elif percentage_change > 0:
            status = "–∑–±—ñ–ª—å—à–µ–Ω–Ω—è –≤–∞–≥–∏ –Ω–∞"
        else:
            status = "–±–µ–∑ –∑–º—ñ–Ω"
        
        top_users.append((user_info.first_name, percentage_change, status))

    top_users.sort(key=lambda x: x[1])
    
    return top_users


@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    if user_id in user_data:
        bot.send_message(message.chat.id, "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!")
        show_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç, –Ω–∞—à —É–ª—é–±–ª–µ–Ω–∏–π –ª–∞—Å—É–Ω! üç©üòã\n–Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–º—ñ–Ω —ñ —Ö–æ—á–µ—à —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏ –¥–æ—Å—è–≥—Ç–∏ –Ω–æ–≤–∏—Ö –≤–∏—Å–æ—Ç, —è —Ç—É—Ç, —â–æ–± –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–±–µ –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ. üí™üöÄ\n–†–∞–∑–æ–º –º–∏ –ø–æ–¥–æ–ª–∞—î–º–æ –∑–∞–π–≤—ñ –∫—ñ–ª–æ–≥—Ä–∞–º–∏ —ñ –∑—Ä–æ–±–∏–º–æ —Ü–µ–π —à–ª—è—Ö —Ü—ñ–∫–∞–≤–∏–º —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–∏–º! üåüüéâ")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('üë®', 'üë©')
        bot.send_message(message.chat.id, "–©–æ–± –º–∏ –º–æ–≥–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –Ü–ú–¢ (—ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞), –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. üëáüòä", reply_markup=markup)
        bot.register_next_step_handler(message, process_gender)

def process_gender(message):
    gender = message.text.lower()
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    user_data[user_id] = UserInfo(gender=gender, first_name=first_name)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –±—É–¥—å –ª–∞—Å–∫–∞ —Å–≤—ñ–π –≤—ñ–∫ ‚úèÔ∏è.\n–û–±—ñ—Ü—è—î–º–æ, —Ü–µ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –º—ñ–∂ –Ω–∞–º–∏! üòâ")
    bot.register_next_step_handler(message, process_age)

def process_age(message):
    user_id = message.from_user.id
    try:
        age = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
        bot.register_next_step_handler(message, process_age)
        return

    user_data[user_id].age = age

    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –∑—Ä—ñ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö ‚úèÔ∏è.")
    bot.register_next_step_handler(message, process_height)

def process_height(message):
    user_id = message.from_user.id
    try:
        height = float(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∑—Ä—ñ—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
        bot.register_next_step_handler(message, process_height)
        return

    user_data[user_id].height = height

    bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä, –Ω–∞–æ—Å—Ç–∞–Ω–æ–∫, –≤–≤–µ–¥–∏ —Å–≤–æ—é –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö ‚úèÔ∏è.")
    bot.register_next_step_handler(message, process_weight)

def process_weight(message):
    user_id = message.from_user.id
    try:
        weight = float(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤–∞–≥—É –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
        bot.register_next_step_handler(message, process_weight)
        return

    user_info = user_data[user_id]
    user_info.weight = weight
    
    # –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –≤–∏–º—ñ—Ä–∏ –¥–æ —Å–ø–∏—Å–∫—É
    user_info.add_measurement(age=user_info.age, height=user_info.height, weight=weight)
    
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é –Ω–∞ –±–æ—Ä—Ç—É! üöÄ\n–¢–µ–ø–µ—Ä —Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ —Å—É–ø–µ—Ä–≥–µ—Ä–æ—ó–≤ –∑—ñ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è!\n–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–∏—Ö –∑–≤–µ—Ä—à–µ–Ω—å? üòé")
    save_data()
    show_main_menu(message)


def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    markup.add('–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üë§', '–í–Ω–µ—Å—Ç–∏ –∑–∞–º—ñ—Ä–∏ üìè', '–ù–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ üèÜ')
    bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å üë§")
def show_user_info(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_info = user_data[user_id]

        last_measurements = user_info.get_last_measurements()
        weight_difference = user_info.get_weight_difference()
        weekly_weight_difference = user_info.get_weekly_weight_difference()
        monthly_weight_difference = user_info.get_monthly_weight_difference()
        health_status = user_info.get_health_status()

        response = (f"–Ü–º'—è: {user_info.first_name}\n"
                    f"–°—Ç–∞—Ç—å: {user_info.gender.capitalize()}\n"
                    f"–í—ñ–∫: {user_info.age}\n"
                    f"–ó—Ä—ñ—Å—Ç: {user_info.height} —Å–º\n"
                    f"–í–∞–≥–∞: {user_info.weight} –∫–≥\n"
                    f"{health_status}\n\n"
                    f"–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º—ñ—Ä–∏:\n{last_measurements}\n"
                    f"–†—ñ–∑–Ω–∏—Ü—è –≤–∞–≥–∏ –º—ñ–∂ –æ—Å—Ç–∞–Ω–Ω—ñ–º —ñ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–º –∑–∞–º—ñ—Ä–æ–º: {weight_difference}\n\n"
                    f"–†—ñ–∑–Ω–∏—Ü—è –≤–∞–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: {weekly_weight_difference}\n"
                    f"–†—ñ–∑–Ω–∏—Ü—è –≤–∞–≥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤: {monthly_weight_difference}")

        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")


@bot.message_handler(func=lambda message: message.text == "–í–Ω–µ—Å—Ç–∏ –∑–∞–º—ñ—Ä–∏ üìè")
def input_measurements(message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_info = user_data[user_id]

        bot.send_message(message.chat.id, f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –≤—ñ–∫: {user_info.age}. –Ø–∫—â–æ –≤—ñ–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–î–∞–ª—ñ', –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('–î–∞–ª—ñ')
        bot.register_next_step_handler(message, process_measurement_age)
        bot.send_message(message.chat.id, "–í—ñ–∫:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–¢–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω–∏ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")

def process_measurement_age(message):
    user_id = message.from_user.id
    if message.text == '–î–∞–ª—ñ':
        age = user_data[user_id].age
    else:
        try:
            age = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤—ñ–∫ –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
            bot.register_next_step_handler(message, process_measurement_age)
            return

    user_data[user_id].age = age
    bot.send_message(message.chat.id, f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –∑—Ä—ñ—Å—Ç: {user_data[user_id].height} —Å–º. –Ø–∫—â–æ –≤—ñ–Ω –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–î–∞–ª—ñ', –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–∞–ª—ñ')
    bot.register_next_step_handler(message, process_measurement_height)
    bot.send_message(message.chat.id, "–ó—Ä—ñ—Å—Ç:", reply_markup=markup)

def process_measurement_height(message):
    user_id = message.from_user.id
    if message.text == '–î–∞–ª—ñ':
        height = user_data[user_id].height
    else:
        try:
            height = float(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∑—Ä—ñ—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
            bot.register_next_step_handler(message, process_measurement_height)
            return

    user_data[user_id].height = height

    bot.send_message(message.chat.id, f"–í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –≤–∞–≥–∞: {user_data[user_id].weight} –∫–≥. –Ø–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–î–∞–ª—ñ', –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–∞–ª—ñ')
    bot.register_next_step_handler(message, process_measurement_weight)
    bot.send_message(message.chat.id, "–í–∞–≥–∞:", reply_markup=markup)

def process_measurement_weight(message):
    user_id = message.from_user.id
    if message.text == '–î–∞–ª—ñ':
        weight = user_data[user_id].weight
    else:
        try:
            weight = float(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –≤–∞–≥—É –≤ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!")
            bot.register_next_step_handler(message, process_measurement_weight)
            return

    user_data[user_id].weight = weight
    user_data[user_id].add_measurement(user_data[user_id].age, user_data[user_id].height, user_data[user_id].weight)
    save_data()

    bot.send_message(message.chat.id, "–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!")
    show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ üèÜ")
def show_top_users(message):
    top_users = calculate_top_users()
    if not top_users:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")
        return
    
    response = "–ù–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for i, (name, weight_change, status) in enumerate(top_users, start=1):
        response += f"{i}. {name} - {status} {abs(weight_change):.2f} % \n"

    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['—ñ–º\'—è'])
def handle_name_change(message):
    user_id = message.from_user.id
    if user_id in user_data:
        text = message.text.strip().split()
        if len(text) > 1:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–æ–≤–µ —ñ–º'—è
            new_first_name = ' '.join(text[1:])  # –ó–±–∏—Ä–∞—î–º–æ –Ω–æ–≤–µ —ñ–º'—è –∑ —Ä–µ—à—Ç–∏ —Å–ª—ñ–≤
            user_data[user_id].first_name = new_first_name
            bot.send_message(message.chat.id, f"–í–∞—à–µ —ñ–º'—è –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_first_name}.")
            save_data()
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: /—ñ–º'—è –í–∞—à–µ –Ω–æ–≤–µ —ñ–º'—è.")
    else:
        bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –Ω–µ –±—É–ª–∏ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω—ñ —ñ–Ω—à–∏–º–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏
@bot.message_handler(func=lambda message: True)
def handle_unhandled_messages(message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    if is_admin(user_id):
        # –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∫—Ä—ñ–º —Å–∞–º–æ–≥–æ —Å–µ–±–µ
        for admin_id in ADMIN_IDS:
            if int(admin_id) != user_id:
                if message.voice:
                    bot.send_voice(admin_id, message.voice.file_id, caption=f"{message.text}")
                else:
                    # –Ø–∫—â–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç
                    bot.send_message(admin_id, message.text)
    else:
        show_main_menu(message)

@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª
    file_info = bot.get_file(message.voice.file_id)
    file_path = bot.download_file(file_info.file_path)
    temp_file = "voice_message.ogg"  # –¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    with open(temp_file, 'wb') as file:
        file.write(file_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–µ–∫—Å—Ç
    text = recognize_speech(temp_file)
    
    if text is False:
        text = "–ù–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
    os.remove(temp_file)
    
    # –î–∞–ª—ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞–∫ —Å–∞–º–æ, —è–∫ —ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message.text = text
    handle_unhandled_messages(message)


if __name__ == "__main__":
    DATA_FILE = "user_data.pickle"
    load_data()
    bot.polling(none_stop=True)
